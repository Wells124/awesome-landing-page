// Generated by Xata Codegen 0.30.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "author",
    checkConstraints: {
      author_xata_email_length_email: {
        name: "author_xata_email_length_email",
        columns: ["email"],
        definition: "CHECK ((length(email) <= 2048))",
      },
      author_xata_id_length_xata_id: {
        name: "author_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
      author_xata_string_length_avatar: {
        name: "author_xata_string_length_avatar",
        columns: ["avatar"],
        definition: "CHECK ((length(avatar) <= 2048))",
      },
      author_xata_string_length_githubId: {
        name: "author_xata_string_length_githubId",
        columns: ["githubId"],
        definition: 'CHECK ((length("githubId") <= 2048))',
      },
      author_xata_string_length_name: {
        name: "author_xata_string_length_name",
        columns: ["name"],
        definition: "CHECK ((length(name) <= 2048))",
      },
      author_xata_string_length_url: {
        name: "author_xata_string_length_url",
        columns: ["url"],
        definition: "CHECK ((length(url) <= 2048))",
      },
      author_xata_string_length_username: {
        name: "author_xata_string_length_username",
        columns: ["username"],
        definition: "CHECK ((length(username) <= 2048))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_author_xata_id_key: {
        name: "_pgroll_new_author_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "avatar",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "email",
        type: "email",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"email"}',
      },
      {
        name: "githubId",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "name",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "url",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "username",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "dictionary",
    checkConstraints: {
      cata_xata_id_length_xata_id: {
        name: "cata_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
      dictionary_xata_string_length_code: {
        name: "dictionary_xata_string_length_code",
        columns: ["code"],
        definition: "CHECK ((length(code) <= 2048))",
      },
      dictionary_xata_string_length_name: {
        name: "dictionary_xata_string_length_name",
        columns: ["name"],
        definition: "CHECK ((length(name) <= 2048))",
      },
      dictionary_xata_string_length_type: {
        name: "dictionary_xata_string_length_type",
        columns: ["type"],
        definition: "CHECK ((length(type) <= 2048))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_cata_xata_id_key: {
        name: "_pgroll_new_cata_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "code",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "name",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "type",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "template",
    checkConstraints: {
      template_xata_id_length_xata_id: {
        name: "template_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
      template_xata_string_length_demoUrl: {
        name: "template_xata_string_length_demoUrl",
        columns: ["demoUrl"],
        definition: 'CHECK ((length("demoUrl") <= 2048))',
      },
      template_xata_string_length_image: {
        name: "template_xata_string_length_image",
        columns: ["image"],
        definition: "CHECK ((length(image) <= 2048))",
      },
      template_xata_string_length_repoUrl: {
        name: "template_xata_string_length_repoUrl",
        columns: ["repoUrl"],
        definition: 'CHECK ((length("repoUrl") <= 2048))',
      },
      template_xata_string_length_slug: {
        name: "template_xata_string_length_slug",
        columns: ["slug"],
        definition: "CHECK ((length(slug) <= 2048))",
      },
      template_xata_string_length_title: {
        name: "template_xata_string_length_title",
        columns: ["title"],
        definition: "CHECK ((length(title) <= 2048))",
      },
      template_xata_text_length_body: {
        name: "template_xata_text_length_body",
        columns: ["body"],
        definition: "CHECK ((octet_length(body) <= 204800))",
      },
      template_xata_text_length_description: {
        name: "template_xata_text_length_description",
        columns: ["description"],
        definition: "CHECK ((octet_length(description) <= 204800))",
      },
    },
    foreignKeys: {
      authorId_link: {
        name: "authorId_link",
        columns: ["authorId"],
        referencedTable: "author",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_template_xata_id_key: {
        name: "_pgroll_new_template_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "authorId",
        type: "link",
        link: { table: "author" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"author"}',
      },
      {
        name: "body",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "demoUrl",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "featured",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "false",
        comment: "",
      },
      {
        name: "hidden",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "false",
        comment: "",
      },
      {
        name: "image",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "images",
        type: "json",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "paid",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "false",
        comment: "",
      },
      {
        name: "publishDate",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "repoUrl",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "slug",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "title",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Author = InferredTypes["author"];
export type AuthorRecord = Author & XataRecord;

export type Dictionary = InferredTypes["dictionary"];
export type DictionaryRecord = Dictionary & XataRecord;

export type Template = InferredTypes["template"];
export type TemplateRecord = Template & XataRecord;

export type DatabaseSchema = {
  author: AuthorRecord;
  dictionary: DictionaryRecord;
  template: TemplateRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://s-workspace-5amuu8.us-east-1.xata.sh/db/awesome-landing-page",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient({
    apiKey: import.meta.env.XATA_API_KEY,
    branch: import.meta.env.XATA_BRANCH,
  });
  return instance;
};
